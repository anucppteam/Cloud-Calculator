#include <iostream>
#include <mysql.h>
#include <winsock2.h>
#include <string.h>
#include <Windows.h>
#pragma comment(lib, "libmariadb.lib")
#pragma comment(lib, "ws2_32")

using namespace std;

#define MYSQLUSER "root"
#define MYSQLPASS "asdf1020"
#define MYSQLIP "localhost"
#define PORT 4567
#define PACKET_SIZE 1024

void Connect(const char sqlip[], MYSQL* conn)
{
	if (conn == NULL) {
		fprintf(stderr, "%s\n", mysql_error(conn));
		Sleep(1000);
		exit(1);
	}
	if (!(mysql_real_connect(conn, MYSQLIP, MYSQLUSER, MYSQLPASS, "test", 5555, NULL, 0) == NULL)) //mysql서버로 연결 성공하면 0 아니면 다른수 반환
	{
		mysql_set_character_set(conn, "euckr");            //MySQL 문자를 지정한다. 만약 안하면 한글이 짤림.
	}
	else {
		fprintf(stderr, "연결 오류 : %s\n", mysql_error(conn));
		exit(1);
	}
}

void Main_Menu() {
	cout << "---------------------\n"
		<< "1. Load Data\n"
		<< "2. Insert Data\n"
		<< "3. Update Data\n"
		<< "4. Delete Data\n"
		<< "5. Access Blog\n"
		<< "6. Quit\n"
		<< "---------------------\n";
}

void Load(MYSQL* conn) {

	MYSQL_RES* sql_result;
	MYSQL_ROW sql_row; // = char **sql_row; 2차원 배열 = 1차원 문자열 배열
	mysql_query(conn, "select * from test.info");
	sql_result = mysql_store_result(conn);
	while (sql_row = mysql_fetch_row(sql_result)) { //값이 없을때까지 변환함
		cout << sql_row[1] << " " << sql_row[2] << " " << sql_row[3] << endl;
	}
	mysql_free_result(sql_result);
}

void Insert(MYSQL* conn) {

	int i = 0;
	char query[255];
	string data[3];

	cout << "tel_number : ";
	cin >> data[1];
	cin.clear();

	cout << "blog url : ";
	cin >> data[2];
	cin.clear();

	sprintf_s(query, "INSERT INTO `test`.`info` (`Form`, `Result`, `IP`) VALUES ('%s', '%f', '%s');", data[0].c_str(), data[1].c_str(), data[2].c_str());
	mysql_query(conn, query);
}

void Delete_D(MYSQL* conn) {

	MYSQL_RES* sql_result;
	MYSQL_ROW sql_row;
	mysql_query(conn, "select * from test.info");
	sql_result = mysql_store_result(conn);
	while (sql_row = mysql_fetch_row(sql_result)) {
		cout << sql_row[0] << " " << sql_row[1] << " " << sql_row[2] << " " << sql_row[3] << endl;
	}

	int row_count = mysql_num_rows(sql_result);

	mysql_free_result(sql_result);
	char query[255];
	cout << "Input the Number of row what you want to Delete" << endl;           //blog_access와 같이 DB에서 넘어온 Row Number와 실제 Row Number이 다를때가 있다
	int i;                                                                       //이는 DB에서 Row Number를 auto increase로 설정해 놓아서 그렇다
	cin >> i;                                                                    //이를 해결하기 위해서는 delete문이 끝난 다음 row number를 update쿼리 문을 사용해서 데이터를 정렬해주어야 한다...
	cin.clear();

	if (i > row_count) {
		cout << "Wrong Number" << endl;
	}
	else {
		sprintf_s(query, "DELETE FROM `test`.`info` WHERE Num = %d", i);
		mysql_query(conn, query);
	}
}                                                                            //사용하기엔 뭔가 좀 그래서 통째로 집어넣었다만.... 그냥 함수로 만들걸 그랬나...
 
int main()
{

	MYSQL* conn = mysql_init(NULL);
	Connect(MYSQLIP, conn);
	int a;

//		while (true)
//		{

	
		/////////////////////이식////////////////////////////
		WSADATA wsaData;//Windows의 소켓 초기화 정보를 저장하기위한 구조체
		WSAStartup(MAKEWORD(2, 2), &wsaData); //WSAStartup(소켓버전, WSADATA 구조체 주소)

		SOCKET hlisten;//운영체제가 관리하는 커널이라는 특수한 영역에 존재하는 기능
		hlisten = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);//PF_INET6을 쓰면 IPv6를 사용하겠다는 것이다. ,SOCK_DGAM을 쓰면 UDP/IP프로토콜을 사용하겠다는 것이다.

		SOCKADDR_IN tListenAddress = {};//Windows 소켓에서 소켓을 연결할 로컬 또는 원격 주소를 지정하는 데 사용된다.
		tListenAddress.sin_family = AF_INET;//반드시 AF_INET이어야한다.
		tListenAddress.sin_port = htons(PORT);//host to network short
		tListenAddress.sin_addr.s_addr = htonl(INADDR_ANY);//host to network long, 빅엔디안-리틀엔디안과 관련이 있다.

		bind(hlisten, (SOCKADDR*)& tListenAddress, sizeof(tListenAddress));//bind(소켓, 소켓 구성요소 구조체의 주소, 그 구조체의 크기)
		listen(hlisten, SOMAXCONN);//접속 승인만 해준다.
		SOCKADDR_IN ClientAddress = {};
		int ClientSize = sizeof(ClientAddress);
		SOCKET Client = accept(hlisten, (SOCKADDR*)& ClientAddress, &ClientSize);//accept(소켓, 소켓 구성요소 주소체의 주소, 그 구조체의 크기를 담고있는 변수의 주소)
		//////////////////////////////////////////////////////////

		char Buffer[PACKET_SIZE] = {};
		recv(Client, Buffer, PACKET_SIZE, 0);// recv(소켓, 수신 정보를 담을 배열주소, 그 배열의 크기, flag)-플래그는 오류 발생시 사용하는건데 안쓰므로 0으로 설정했다
		printf("Recv Message : %s\n", Buffer);

		char Message[] = "Server Send";
		send(Client, Message, strlen(Message), 0);


/*		while (true) {
		
			//system("cls");
			Main_Menu();
			cin >> a;
			cin.clear();
			switch (a)
			{
			case 1: //system("cls"); 
				Load(conn);
				//system("pause");
				continue;
			case 2: //system("cls"); 
				Insert(conn);
				//system("pause");
				continue;
				//      case 3: Update(conn);                                                //update는 미구현
				//         continue;
			case 4: //system("cls"); 
				Delete_D(conn);
				//system("pause");
				continue;
			case 6: cout << "Good bye";
				break;
			default: "Wrong Input";
				continue;
			}
			break;
		}*/
		/////////////이식///////////////////
		closesocket(Client);
		closesocket(hlisten);
		//////////////////////////////
//	}//while(안쪾
	mysql_close(conn);
}
