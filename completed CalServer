#include <iostream>
#include <mysql.h>
#include <winsock2.h>
#include <string.h>
#include <Windows.h>
#include <math.h>
#include <vector>
#pragma comment(lib, "libmariadb.lib")
#pragma comment(lib, "ws2_32")
#pragma warning(disable:4996)
using namespace std;

#define MYSQLUSER "root"
#define MYSQLPASS "asdf1020"
#define MYSQLIP "localhost"
#define PORT 4567
#define PACKET_SIZE 2048
#define _CRT_SECURE_NO_WARNINGS

int Factorial (int num) {
	if (num <= 1)
		return num;
	else
		return num = num * Factorial(num - 1);
}

void Connect(const char sqlip[], MYSQL* conn)
{
	if (conn == NULL) {
		fprintf(stderr, "%s\n", mysql_error(conn));
		Sleep(1000);
		exit(1);
	}
	if (!(mysql_real_connect(conn, MYSQLIP, MYSQLUSER, MYSQLPASS, "test", 5555, NULL, 0) == NULL)) //mysql서버로 연결 성공하면 0 아니면 다른수 반환
	{
		mysql_set_character_set(conn, "euckr");            //MySQL 문자를 지정한다. 만약 안하면 한글이 짤림.
	}
	else {
		fprintf(stderr, "연결 오류 : %s\n", mysql_error(conn));
		exit(1);
	}
}

string Main_Menu() {
	return  "---------------------1. log   2. Calculate   3. exit  4. delete---------------------";	
}

string Load(MYSQL* conn) {
	char Buffer[PACKET_SIZE] = {};
	MYSQL_RES* sql_result;
	MYSQL_ROW sql_row; // = char **sql_row; 2차원 배열 = 1차원 문자열 배열
	mysql_query(conn, "select * from test.info LIMIT 10");
	sql_result = mysql_store_result(conn);
	while (sql_row = mysql_fetch_row(sql_result)) { //값이 없을때까지 변환함
		for (int i = 1; i < 4; i++) {
			strcat_s(Buffer, sql_row[i]);
			strcat_s(Buffer, " ");
		}
		strcat_s(Buffer, "\n");
	}
	mysql_free_result(sql_result);
	return Buffer;
}

void Insert(MYSQL* conn, string form, float result) {
	char query[255];
	sprintf_s(query, "INSERT INTO `test`.`info` (`Form`, `Result`) VALUES ('%s', '%f');", form.c_str(), result);
	mysql_query(conn, query);
}

void Delete_D(MYSQL* conn) {

	char query[255];

	sprintf_s(query, "DELETE FROM `test`.`info`");
	mysql_query(conn, query);

}                                                                            //사용하기엔 뭔가 좀 그래서 통째로 집어넣었다만.... 그냥 함수로 만들걸 그랬나...
 
int main()
{
	char a[80] = {};
	char b[80] = {};
	char p[80] = {};

	char c;
	int i, doc , sign,ires;
	double res;
	double ult;

	char Buff[10] = {};

	MYSQL* conn = mysql_init(NULL);
	Connect(MYSQLIP, conn);
	char Buffer[PACKET_SIZE] = {};

		while (true)
			{

	
			/////////////////////이식////////////////////////////
			WSADATA wsaData;//Windows의 소켓 초기화 정보를 저장하기위한 구조체
			WSAStartup(MAKEWORD(2, 2), &wsaData); //WSAStartup(소켓버전, WSADATA 구조체 주소)

			SOCKET hlisten;//운영체제가 관리하는 커널이라는 특수한 영역에 존재하는 기능
			hlisten = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);//PF_INET6을 쓰면 IPv6를 사용하겠다는 것이다. ,SOCK_DGAM을 쓰면 UDP/IP프로토콜을 사용하겠다는 것이다.

			SOCKADDR_IN tListenAddress = {};//Windows 소켓에서 소켓을 연결할 로컬 또는 원격 주소를 지정하는 데 사용된다.
			tListenAddress.sin_family = AF_INET;//반드시 AF_INET이어야한다.
			tListenAddress.sin_port = htons(PORT);//host to network short
			tListenAddress.sin_addr.s_addr = htonl(INADDR_ANY);//host to network long, 빅엔디안-리틀엔디안과 관련이 있다.

			bind(hlisten, (SOCKADDR*)& tListenAddress, sizeof(tListenAddress));//bind(소켓, 소켓 구성요소 구조체의 주소, 그 구조체의 크기)
			listen(hlisten, SOMAXCONN);//접속 승인만 해준다.
			SOCKADDR_IN ClientAddress = {};
			int ClientSize = sizeof(ClientAddress);
			SOCKET Client = accept(hlisten, (SOCKADDR*)& ClientAddress, &ClientSize);//accept(소켓, 소켓 구성요소 주소체의 주소, 그 구조체의 크기를 담고있는 변수의 주소)
			//////////////////////////////////////////////////////////
			send(Client, Main_Menu().c_str(), strlen(Main_Menu().c_str()), 0);
		while (true) {
			//memset(Buffer, 0, sizeof(Buffer));
			recv(Client, Buffer, PACKET_SIZE, 0);
			switch (Buffer[0])
			{
			case '1' :
				memset(Buffer, 0, sizeof(Buffer));
				strcat_s(Buffer, Load(conn).c_str());
				strcat_s(Buffer, Main_Menu().c_str());
				send(Client, Buffer, strlen(Buffer), 0);
				continue;
			case '2':
					memset(Buffer, 0, sizeof(Buffer));
					strcpy(Buffer, "어떠한 계산을 원하십니까?\n+, -, *, /, sum, factorial(!), root, pow\n");
					send(Client, Buffer, strlen(Buffer), 0);
					memset(Buffer, 0, sizeof(Buffer));
					recv(Client, Buffer, PACKET_SIZE, 0);
					switch (Buffer[0]) {
					case '+':
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "두번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(b, Buffer);
						memset(Buffer, NULL, sizeof(Buffer));
						res = atof(a) + atof(b);///////////////////////
						strcpy(Buffer, a);
						strcat_s(Buffer, " + ");
						strcat_s(Buffer, b);

						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");

						ires = (int)res;//형변환
						ult = res - ires;

						strcat_s(Buffer, _itoa(ires, Buff, 10));
						strcat_s(Buffer, ".");
						strcat_s(Buffer, _ecvt(ult, sizeof(ult), &doc, &sign));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						continue;
					case '-':
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "두번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(b, Buffer);
						res = atof(a) - atof(b);
						memset(Buffer, NULL, sizeof(Buffer));
						strcpy(Buffer, a);
						strcat_s(Buffer, " - ");
						strcat_s(Buffer, b);
						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");

						ires = (int)res;//형변환
						ult = res - ires;

						strcat_s(Buffer, _itoa(ires, Buff, 10));
						strcat_s(Buffer, ".");
						strcat_s(Buffer, _ecvt(ult, sizeof(ult), &doc, &sign));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						continue;


					case '*':
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "두번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(b, Buffer);
						memset(Buffer, NULL, sizeof(Buffer));
						res = atof(a) * atof(b);///////////////////////
						strcpy(Buffer, a);
						strcat_s(Buffer, " * ");
						strcat_s(Buffer, b);
						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");

						ires = (int)res;//형변환
						ult = res - ires;

						strcat_s(Buffer, _itoa(ires, Buff, 10));
						strcat_s(Buffer, ".");
						strcat_s(Buffer, _ecvt(ult, sizeof(ult), &doc, &sign));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						continue;
					case '/':
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "두번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(b, Buffer);
						memset(Buffer, NULL, sizeof(Buffer));
						res = atof(a) / atof(b);///////////////////////
						strcpy(Buffer, a);
						strcat_s(Buffer, " / ");
						strcat_s(Buffer, b);
						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");

						ires = (int)res;//형변환
						ult = res - ires;

						strcat_s(Buffer, _itoa(ires, Buff, 10));
						strcat_s(Buffer, ".");
						strcat_s(Buffer, _ecvt(ult, sizeof(ult), &doc, &sign));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						continue;


					case 's':
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "두번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(b, Buffer);
						res = 0;
						memset(Buffer, NULL, sizeof(Buffer));
						for (i = atoi(a); i <= atoi(b); i++) {
							res += i;
						}

						strcat_s(Buffer, "Sum");
						strcat_s(Buffer, a);
						strcat_s(Buffer, " to ");
						strcat_s(Buffer, b);
						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");
						strcat_s(Buffer, _itoa((int)res, Buff, 10));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, NULL, sizeof(Buffer));
						continue;

					case '!':
					case 'F':
					case 'f':
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						res = 0;
						res = Factorial(atoi(a));
						strcat_s(Buffer, a);
						strcat_s(Buffer, "!");
						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");
						strcat_s(Buffer, _itoa((int)res, Buff, 10));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						continue;

					case 'r':
						cout << Buffer;
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						res = 0;
						res = sqrt(atoi(a));
						ires = (int)res;//형변환
						ult = res - ires;

						strcat_s(Buffer, "root ");
						strcat_s(Buffer, a);
						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");
						strcat_s(Buffer, _itoa(ires, Buff, 10));
						strcat_s(Buffer, ".");
						strcat_s(Buffer, _ecvt(ult, sizeof(ult), &doc, &sign));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						continue;

					case 'p':
						cout << Buffer;
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "첫번째 숫자를 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(a, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						strcpy(Buffer, "지수승을 입력하시오\n");
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						recv(Client, Buffer, PACKET_SIZE, 0);
						strcpy(b, Buffer);
						memset(Buffer, 0, sizeof(Buffer));
						res = 0;
						res = pow(atoi(a), atoi(b));
						strcat_s(Buffer, a);
						strcat_s(Buffer, "^");
						strcat_s(Buffer, b);
						Insert(conn, Buffer, res);
						strcat_s(Buffer, " = ");
						strcat_s(Buffer, _itoa((int)res, Buff, 10));
						strcat_s(Buffer, "\n");
						strcat_s(Buffer, Main_Menu().c_str());
						send(Client, Buffer, strlen(Buffer), 0);
						memset(Buffer, 0, sizeof(Buffer));
						continue;
					default:cout << "error" << endl;
						break;

					}
				continue;
			case '4':
				Delete_D(conn);
				memset(Buffer, 0, sizeof(Buffer));
				strcpy(Buffer, "DB log Deleted\n");
				strcat_s(Buffer, Main_Menu().c_str());
				send(Client, Buffer, strlen(Buffer), 0);
				continue;
			case '3': 
				memset(Buffer, 0, sizeof(Buffer));
				strcpy(Buffer, "exit");
				send(Client, Buffer, strlen(Buffer), 0);
				break;
			default: 
				memset(Buffer, 0, sizeof(Buffer));
				strcat_s(Buffer,"Wrong Input\n");
				strcat_s(Buffer, Main_Menu().c_str());
				send(Client, Buffer, strlen(Buffer), 0);
				recv(Client, Buffer, PACKET_SIZE, 0);
				continue;
			}
			break;
		}
		/////////////이식///////////////////
		closesocket(Client);
		closesocket(hlisten);
		//////////////////////////////
	}//while(

	mysql_close(conn);
}
